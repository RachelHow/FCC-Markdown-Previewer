{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["marked","require","App","state","markdown","updateMarkdown","this","setState","_this2","react_default","a","createElement","className","FormGroup_default","controlId","FormControl_default","as","placeholder","value","onChange","event","target","id","dangerouslySetInnerHTML","__html","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"6SAKIA,EAASC,EAAQ,IAyCNC,6MArCbC,MAAQ,CACNC,SAAU,whBAGZC,eAAiB,SAASD,GACxBE,KAAKC,SAAS,CAACH,sFAGR,IAAAI,EAAAF,KAEFF,EAAYE,KAAKH,MAAjBC,SAEL,OACEK,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBACbH,EAAAC,EAAAC,cAAA,UAAQC,UAAU,aAChBH,EAAAC,EAAAC,cAAA,iCAGFF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,YACbH,EAAAC,EAAAC,cAACE,EAAAH,EAAD,CAAWI,UAAU,UACnBL,EAAAC,EAAAC,cAACI,EAAAL,EAAD,CAAaM,GAAG,WAAWC,YAAa,GAAGC,MAAOd,EAAUe,SAAU,SAACC,GAAD,OAASZ,EAAKH,eAAee,EAAMC,OAAOH,YAIpHT,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACbH,EAAAC,EAAAC,cAAA,OAAKW,GAAG,UAAUC,wBAAyB,CAACC,OAAQxB,EAAOI,gBA5BrDqB,aCKEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOvB,EAAAC,EAAAC,cAACsB,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.3253f34a.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\nimport FormGroup from 'react-bootstrap/FormGroup';\nimport FormControl from 'react-bootstrap/FormControl';\n\nlet marked = require(\"marked\");\n\nclass App extends Component {\n\n  state = {\n    markdown: \"# Hello there!\\n## Welcome to my React Markdown Previewer! \\n### Built with React :)\\n\\n-----------\\n\\n*italic*, **bold**,\\n`monospace`, ~~strikethrough~~ and [links](https://www.freecodecamp.com).\\n\\n---\\n\\n> Block Quotes!\\n\\nUnordered list:\\n\\n* apples\\n* oranges\\n* pears\\n\\nNumbered list:\\n\\n1. apples\\n2. oranges\\n3.pears\\n\\nHere's some `code`,\\n\\n```javascript\\nfunction sayHello() {\\n  return 'Hello world!';\\n}\\n```\\n\\n **Stromtoopocat** says Hi!\\n\\n ![Stormtroopocat](https://octodex.github.com/images/stormtroopocat.jpg)\"\n  }\n\n  updateMarkdown = function(markdown){\n    this.setState({markdown});\n  }\n\n  render() {\n\n    let {markdown} = this.state;\n\n    return (\n      <div className=\"App container\">\n        <header className=\"my-header\">\n          <h1>Markdown Previewer</h1>\n        </header>\n\n        <div className=\"main\">\n          <div className=\"left-col\">\n            <FormGroup controlId=\"editor\">\n              <FormControl as=\"textarea\" placeholder= \"\" value={markdown} onChange={(event)=>this.updateMarkdown(event.target.value)}></FormControl>\n            </FormGroup>\n          </div>\n\n          <div className=\"right-col\">\n            <div id=\"preview\" dangerouslySetInnerHTML={{__html: marked(markdown)}}>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\n\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}